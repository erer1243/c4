From 01bffe23fd2285c28e93969233bfe6e495475c3a Mon Sep 17 00:00:00 2001
From: erer1243 <>
Date: Tue, 6 Dec 2022 13:51:01 -0500
Subject: [PATCH] robot mods

---
 Position.hpp |  4 +++-
 main.cpp     | 16 +++++++++++++++-
 2 files changed, 18 insertions(+), 2 deletions(-)

diff --git a/Position.hpp b/Position.hpp
index 89ed77e..28460d2 100644
--- a/Position.hpp
+++ b/Position.hpp
@@ -213,6 +213,8 @@ class Position {
    * Default constructor, build an empty position.
    */
   Position() : current_position{0}, mask{0}, moves{0} {}
+
+  Position(position_t cur_pos, position_t cur_mask, unsigned int cur_moves): current_position(cur_pos), mask(cur_mask), moves(cur_moves) {}

   /**
    * Indicates whether a column is playable.
@@ -243,7 +245,7 @@ class Position {
     return winning_position() & possible() & column_mask(col);
   }

- private:
+ // private:
   position_t current_position; // bitmap of the current_player stones
   position_t mask;             // bitmap of all the already palyed spots
   unsigned int moves;        // number of moves played since the beinning of the game.
diff --git a/main.cpp b/main.cpp
index 80b0e8e..dffe91b 100644
--- a/main.cpp
+++ b/main.cpp
@@ -18,6 +18,8 @@

 #include "Solver.hpp"
 #include <iostream>
+#include <string>
+#include <sstream>

 using namespace GameSolver::Connect4;

@@ -55,9 +57,21 @@ int main(int argc, char** argv) {

   for(int l = 1; std::getline(std::cin, line); l++) {
     Position P;
-    if(P.play(line) != line.size()) {
+    if (line.length() > 1 && line.front() == '#') {
+      std::stringstream stream(line.substr(1));
+      unsigned long long a, b;
+      unsigned int moves;
+      stream >> a >> b >> moves;
+      uint64_t pos = static_cast<uint64_t>(a);
+      uint64_t mask = static_cast<uint64_t>(b);
+      Position p(pos, mask, moves);
+      std::vector<int> scores = solver.analyze(p, weak);
+      for (int i = 0; i < 7; i++) std::cout << " " << scores[i];
+      std::cout << std::endl;
+    } else if(P.play(line) != line.size()) {
       std::cerr << "Line " << l << ": Invalid move " << (P.nbMoves() + 1) << " \"" << line << "\"" << std::endl;
     } else {
+      std::cout << "position=" << P.current_position << " mask=" << P.mask << " moves=" << P.moves << std::endl;
       std::cout << line;
       if(analyze) {
         std::vector<int> scores = solver.analyze(P, weak);
--
2.38.1

